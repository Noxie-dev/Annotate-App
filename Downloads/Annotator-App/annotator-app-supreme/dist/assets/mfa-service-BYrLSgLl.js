var i=Object.defineProperty;var c=(s,e,r)=>e in s?i(s,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):s[e]=r;var a=(s,e,r)=>c(s,typeof e!="symbol"?e+"":e,r);class u{constructor(){a(this,"baseUrl","http://localhost:3001");a(this,"defaultConfig",{issuer:"Annotator App",accountName:"",secretLength:32,algorithm:"SHA1",digits:6,period:30})}isMFARequired(e){if(e.role.name==="Enterprise User"||e.role.level>=3)return!0;const r=["admin_access","user_management","system_settings","billing_access"];return e.permissions.some(t=>r.includes(t))}async setupMFA(e,r){try{const t=await fetch(`${this.baseUrl}/auth/mfa/setup`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${this.getAuthToken()}`},body:JSON.stringify({user_id:e,email:r})});if(!t.ok)throw new Error("Failed to setup MFA");const o=await t.json();return this.mapMFASetupResponse(o)}catch(t){throw console.error("MFA setup error:",t),new Error("Failed to setup MFA")}}async verifyMFASetup(e,r,t){try{const o=await fetch(`${this.baseUrl}/auth/mfa/verify-setup`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${this.getAuthToken()}`},body:JSON.stringify({user_id:e,totp_code:r,secret_key:t})});if(!o.ok)throw new Error("Invalid verification code");return{success:!0,message:(await o.json()).message||"MFA setup completed successfully"}}catch(o){throw console.error("MFA verification error:",o),new Error("Invalid verification code")}}async verifyTOTP(e,r){try{const t=await fetch(`${this.baseUrl}/auth/mfa/verify`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${this.getAuthToken()}`},body:JSON.stringify({user_id:e,totp_code:r})});if(!t.ok)throw new Error("Invalid authentication code");return{success:!0,message:(await t.json()).message||"Authentication successful"}}catch(t){throw console.error("TOTP verification error:",t),new Error("Invalid authentication code")}}async verifyBackupCode(e,r){try{const t=await fetch(`${this.baseUrl}/auth/mfa/verify-backup`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${this.getAuthToken()}`},body:JSON.stringify({user_id:e,backup_code:r})});if(!t.ok)throw new Error("Invalid backup code");return{success:!0,message:(await t.json()).message||"Backup code verified successfully"}}catch(t){throw console.error("Backup code verification error:",t),new Error("Invalid backup code")}}async disableMFA(e,r){try{if(!(await fetch(`${this.baseUrl}/auth/mfa/disable`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${this.getAuthToken()}`},body:JSON.stringify({user_id:e,totp_code:r})})).ok)throw new Error("Failed to disable MFA")}catch(t){throw console.error("MFA disable error:",t),new Error("Failed to disable MFA")}}async generateBackupCodes(e,r){try{const t=await fetch(`${this.baseUrl}/auth/mfa/backup-codes`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${this.getAuthToken()}`},body:JSON.stringify({user_id:e,totp_code:r})});if(!t.ok)throw new Error("Failed to generate backup codes");return(await t.json()).backup_codes}catch(t){throw console.error("Backup codes generation error:",t),new Error("Failed to generate backup codes")}}generateTOTPUrl(e,r,t){const o={...this.defaultConfig,...t},n=new URLSearchParams({secret:e,issuer:o.issuer,algorithm:o.algorithm,digits:o.digits.toString(),period:o.period.toString()});return`otpauth://totp/${encodeURIComponent(o.issuer)}:${encodeURIComponent(r)}?${n}`}generateMockMFASetup(e){const r=this.generateSecretKey(),t=this.generateTOTPUrl(r,e);return{qrCodeUrl:`https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=${encodeURIComponent(t)}`,secretKey:r,backupCodes:this.generateMockBackupCodes()}}generateMockBackupCodes(){const e=[];for(let r=0;r<8;r++){const t=Math.random().toString(36).substring(2,7).toUpperCase()+"-"+Math.random().toString(36).substring(2,7).toUpperCase();e.push(t)}return e}generateSecretKey(){const e="ABCDEFGHIJKLMNOPQRSTUVWXYZ234567";let r="";for(let t=0;t<32;t++)r+=e.charAt(Math.floor(Math.random()*e.length));return r}mockVerifyTOTP(e){if(/^\d{6}$/.test(e))return{success:!0,message:"Authentication successful"};throw new Error("Invalid authentication code")}mockVerifyBackupCode(e){if(/^[A-Z0-9]{5}-[A-Z0-9]{5}$/.test(e.toUpperCase()))return{success:!0,message:"Backup code verified successfully"};throw new Error("Invalid backup code")}mapMFASetupResponse(e){return{qrCodeUrl:e.qr_code_url,secretKey:e.secret_key,backupCodes:e.backup_codes}}getAuthToken(){return localStorage.getItem("auth_token")}}const h=new u;export{h as m};
